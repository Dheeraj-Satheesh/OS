#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_PHILOSOPHERS 5

typedef enum { THINKING, HUNGRY, EATING } State;

typedef struct {
    State states[NUM_PHILOSOPHERS];
    pthread_mutex_t mutex;
    pthread_cond_t self[NUM_PHILOSOPHERS];
} Monitor;

Monitor monitor;

void initialize() {
    int i;
    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        monitor.states[i] = THINKING;
        pthread_cond_init(&monitor.self[i], NULL);
    }
    pthread_mutex_init(&monitor.mutex, NULL);
}

void pickup_forks(int philosopher) {
    pthread_mutex_lock(&monitor.mutex);
    monitor.states[philosopher] = HUNGRY;
    test(philosopher);
    if (monitor.states[philosopher] != EATING)
        pthread_cond_wait(&monitor.self[philosopher], &monitor.mutex);
    pthread_mutex_unlock(&monitor.mutex);
}

void putdown_forks(int philosopher) {
    pthread_mutex_lock(&monitor.mutex);
    monitor.states[philosopher] = THINKING;
    test((philosopher + 4) % NUM_PHILOSOPHERS);
    test((philosopher + 1) % NUM_PHILOSOPHERS);
    pthread_mutex_unlock(&monitor.mutex);
}

void test(int philosopher) {
    if (monitor.states[(philosopher + 4) % NUM_PHILOSOPHERS] != EATING &&
        monitor.states[philosopher] == HUNGRY &&
        monitor.states[(philosopher + 1) % NUM_PHILOSOPHERS] != EATING) {
        monitor.states[philosopher] = EATING;
        pthread_cond_signal(&monitor.self[philosopher]);
    }
}

void* philosopher(void* arg) {
    int philosopher = (int)arg;
    int i;
    for (i = 0; i < 3; i++) {
        // Thinking
        printf("Philosopher %d is thinking\n", philosopher);
        sleep(rand() % 3);

        // Hungry
        printf("Philosopher %d is hungry\n", philosopher);
        pickup_forks(philosopher);

        // Eating
        printf("Philosopher %d is eating\n", philosopher);
        sleep(rand() % 3);

        // Done eating
        printf("Philosopher %d is done eating\n", philosopher);
        putdown_forks(philosopher);
    }
    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int i, philosopher_ids[NUM_PHILOSOPHERS];

    initialize();

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    return 0;
}
